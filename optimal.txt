import java.util.*;

public class optimal {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of frames: ");
        int numFrames = Integer.parseInt(scanner.nextLine());

        System.out.print("Enter the reference string (e.g., 1 2 3 4): ");
        String[] referenceString = scanner.nextLine().split(" ");

        int[] pages = new int[referenceString.length];
        for (int i = 0; i < referenceString.length; i++) {
            pages[i] = Integer.parseInt(referenceString[i]);
        }

        int pageFaults = calculatePageFaults(pages, numFrames);
        System.out.println("Number of Page Faults: " + pageFaults);
    }

    private static int calculatePageFaults(int[] pages, int numFrames) {
        Set<Integer> frameSet = new HashSet<>();
        Map<Integer, Integer> pageNextUse = new HashMap<>();
        int pageFaults = 0;

        for (int i = 0; i < pages.length; i++) {
            int page = pages[i];

            if (!frameSet.contains(page)) {
                if (frameSet.size() < numFrames) {
                    frameSet.add(page);
                } else {
                    int pageToReplace = findPageToReplace(frameSet, pageNextUse, pages, i);
                    frameSet.remove(pageToReplace);
                    frameSet.add(page);
                }
                pageFaults++;
            }

            // Update next use information for all pages
            updateNextUse(pageNextUse, frameSet, pages, i);

            // Print the current state of the frames
            System.out.println("Frames: " + frameSet);
        }

        return pageFaults;
    }

    private static int findPageToReplace(Set<Integer> frameSet, Map<Integer, Integer> pageNextUse, int[] pages, int currentIndex) {
        int pageToReplace = -1;
        int farthestUse = -1;
    
        for (int page : frameSet) {
            if (!pageNextUse.containsKey(page)) {
                return page;  // If a page will not be used again, replace it
            }
    
            int nextUseIndex = pageNextUse.get(page);
            if (nextUseIndex > farthestUse) {
                farthestUse = nextUseIndex;
                pageToReplace = page;
            }
        }
    
        return pageToReplace;
    }
    

    private static void updateNextUse(Map<Integer, Integer> pageNextUse, Set<Integer> frameSet, int[] pages, int currentIndex) {
        for (int page : frameSet) {
            for (int i = currentIndex + 1; i < pages.length; i++) {
                if (pages[i] == page) {
                    pageNextUse.put(page, i);
                    break;
                }
            }
        
    }
    
}
}


Enter the number of frames: 4
Enter the reference string (e.g., 1 2 3 4): 7 0 1 2 0 3 0 4 2 3 0 3 2