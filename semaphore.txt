import java.util.concurrent.Semaphore;

class SharedBuffer {
    private static final int BUFFER_SIZE = 5;
    private int[] buffer = new int[BUFFER_SIZE];
    private int count = 0;
    private int in = 0;
    private int out = 0;

    private Semaphore mutex = new Semaphore(1); // Controls access to the buffer
    private Semaphore empty = new Semaphore(BUFFER_SIZE); // Counts empty slots in the buffer
    private Semaphore full = new Semaphore(0); // Counts filled slots in the buffer

    public void produce(int item) throws InterruptedException {
        empty.acquire(); // Wait for an empty slot
        mutex.acquire(); // Enter critical section

        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        count++;

        System.out.println("Produced: " + item + ", Count: " + count);

        mutex.release(); // Exit critical section
        full.release(); // Notify that a slot is filled
    }

    public void consume() throws InterruptedException {
        full.acquire(); // Wait for a filled slot
        mutex.acquire(); // Enter critical section

        int item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        count--;

        System.out.println("Consumed: " + item + ", Count: " + count);

        mutex.release(); // Exit critical section
        empty.release(); // Notify that a slot is empty
    }
}

class Producer extends Thread {
    private SharedBuffer buffer;

    public Producer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        try {
            for (int i = 1; i <= 10; i++) {
                buffer.produce(i);
                sleep(1000); // Simulate some work
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer extends Thread {
    private SharedBuffer buffer;

    public Consumer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        try {
            for (int i = 1; i <= 10; i++) {
                buffer.consume();
                sleep(1500); // Simulate some work
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class PCSemaphore {
    public static void main(String[] args) {
        SharedBuffer buffer = new SharedBuffer();

        Producer producer = new Producer(buffer);
        Consumer consumer = new Consumer(buffer);

        producer.start();
        consumer.start();
    }
}
